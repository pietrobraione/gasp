package small.mergesort;

import java.util.Arrays;
import java.util.stream.IntStream;

import jbse.meta.Analysis;

/**
 * Sorts an array with the mergesort algorithm.
 * 
 * Expected worst case: generated by the method {@code worstCaseArrayOfSize(int)} 
 * (maximizes the number of comparisons).
 */
public class Mergesort {
	public void sort(int[] l) {
		Analysis.assume(l.length == 100);
		_sort(l);
	}
	
	private void _sort(int[] l) {
		if (l.length > 1) {
			final int mid = l.length / 2;
			final int[] left = new int[mid];
			final int[] right = new int[l.length - mid];
			System.arraycopy(l, 0, left, 0, mid);
			System.arraycopy(l, mid, right, 0, l.length - mid);
			
			_sort(left);
			_sort(right);
			
			int i = 0, j = 0, k = 0;
			while (i < left.length && j < right.length) {
				if (left[i] < right[j]) {
					l[k] = left[i];
					++i;
				} else {
					l[k] = right[j];
					++j;
				}
				++k;
			}
			
			while (i < left.length) {
				l[k] = left[i];
				++i;
				++k;
			}
			
			while (j < right.length) {
				l[k] = right[j];
				++j;
				++k;
			}
		}
	}
	
	public void sortWorstCase() {
		//final int[] worst10 = {8, 4, 6, 10, 2, 7, 3, 5, 9, 1};
		//final int[] worst50 = {32, 48, 16, 24, 40, 8, 28, 44, 12, 20, 36, 4, 30, 46, 14, 22, 38, 6, 26, 42, 10, 50, 18, 34, 2, 31, 47, 15, 23, 39, 7, 27, 43, 11, 19, 35, 3, 29, 45, 13, 21, 37, 5, 25, 41, 9, 49, 17, 33, 1};
		//final int[] worst75 = {64, 32, 48, 16, 56, 24, 40, 72, 8, 60, 28, 44, 12, 52, 20, 36, 68, 4, 62, 30, 46, 14, 54, 22, 38, 70, 6, 58, 26, 42, 74, 10, 50, 18, 34, 66, 2, 63, 31, 47, 15, 55, 23, 39, 71, 7, 59, 27, 43, 75, 11, 51, 19, 35, 67, 3, 61, 29, 45, 13, 53, 21, 37, 69, 5, 57, 25, 41, 73, 9, 49, 17, 33, 65, 1};
		final int[] worst100 = {64, 96, 32, 48, 80, 16, 56, 88, 24, 40, 72, 8, 60, 92, 28, 44, 76, 12, 52, 84, 20, 100, 36, 68, 4, 62, 94, 30, 46, 78, 14, 54, 86, 22, 38, 70, 6, 58, 90, 26, 42, 74, 10, 50, 82, 18, 98, 34, 66, 2, 63, 95, 31, 47, 79, 15, 55, 87, 23, 39, 71, 7, 59, 91, 27, 43, 75, 11, 51, 83, 19, 99, 35, 67, 3, 61, 93, 29, 45, 77, 13, 53, 85, 21, 37, 69, 5, 57, 89, 25, 41, 73, 9, 49, 81, 17, 97, 33, 65, 1 };
		sort(worst100);
	}
	
	private static int[] worstCase(int size) {
		if (size < 0) {
			throw new NegativeArraySizeException();
		} else if (size == 0) {
			return new int[0];
		} else if (size == 1) {
			return new int[] { 1 };
		} else {
			final int[] top = worstCase((int) Math.floor(((float) size) / 2));
			final int[] bottom = worstCase((int) Math.ceil(((float) size) / 2));
			return IntStream.concat(Arrays.stream(top).map(x -> x * 2), Arrays.stream(bottom).map(x -> x * 2 - 1)).toArray();
		}
	}
	
	public static void main(String[] s) {
		System.out.println(Arrays.toString(worstCase(75)));
	}
}
