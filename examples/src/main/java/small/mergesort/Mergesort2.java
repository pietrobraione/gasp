package small.mergesort;

import java.util.Arrays;
import java.util.stream.IntStream;

import jbse.meta.Analysis;

/**
 * Sorts an array with the mergesort algorithm.
 * 
 * Expected worst case: generated by the method {@code worstCaseArrayOfSize(int)} 
 * (maximizes the number of comparisons).
 */
public class Mergesort2 {
	int i0 = 0,  i1 = 0,  i2 = 0,  i3 = 0,  i4 = 0,  i5 = 0,  i6 = 0,  i7 = 0,  i8 = 0,  i9 = 0;
	int i10 = 0, i11 = 0, i12 = 0, i13 = 0, i14 = 0, i15 = 0, i16 = 0, i17 = 0, i18 = 0, i19 = 0;
	int i20 = 0, i21 = 0, i22 = 0, i23 = 0, i24 = 0, i25 = 0, i26 = 0, i27 = 0, i28 = 0, i29 = 0;
	int i30 = 0, i31 = 0, i32 = 0, i33 = 0, i34 = 0, i35 = 0, i36 = 0, i37 = 0, i38 = 0, i39 = 0;
	int i40 = 0, i41 = 0, i42 = 0, i43 = 0, i44 = 0, i45 = 0, i46 = 0, i47 = 0, i48 = 0, i49 = 0;
	int i50 = 0, i51 = 0, i52 = 0, i53 = 0, i54 = 0, i55 = 0, i56 = 0, i57 = 0, i58 = 0, i59 = 0;
	int i60 = 0, i61 = 0, i62 = 0, i63 = 0, i64 = 0, i65 = 0, i66 = 0, i67 = 0, i68 = 0, i69 = 0;
	int i70 = 0, i71 = 0, i72 = 0, i73 = 0, i74 = 0, i75 = 0, i76 = 0, i77 = 0, i78 = 0, i79 = 0;
	int i80 = 0, i81 = 0, i82 = 0, i83 = 0, i84 = 0, i85 = 0, i86 = 0, i87 = 0, i88 = 0, i89 = 0;
	int i90 = 0, i91 = 0, i92 = 0, i93 = 0, i94 = 0, i95 = 0, i96 = 0, i97 = 0, i98 = 0, i99 = 0;
	
	public void sort() {
		final int[] l = new int[100];
		l[0] = i0;   l[1] = i1;   l[2] = i2;   l[3] = i3;   l[4] = i4;   l[5] = i5;   l[6] = i6;   l[7] = i7;   l[8] = i8;   l[9] = i9;
		l[10] = i10; l[11] = i11; l[12] = i12; l[13] = i13; l[14] = i14; l[15] = i15; l[16] = i16; l[17] = i17; l[18] = i18; l[19] = i19;
		l[20] = i20; l[21] = i21; l[22] = i22; l[23] = i23; l[24] = i24; l[25] = i25; l[26] = i26; l[27] = i27; l[28] = i28; l[29] = i29;
		l[30] = i30; l[31] = i31; l[32] = i32; l[33] = i33; l[34] = i34; l[35] = i35; l[36] = i36; l[37] = i37; l[38] = i38; l[39] = i39;
		l[40] = i40; l[41] = i41; l[42] = i42; l[43] = i43; l[44] = i44; l[45] = i45; l[46] = i46; l[47] = i47; l[48] = i48; l[49] = i49;
		l[50] = i50; l[51] = i51; l[52] = i52; l[53] = i53; l[54] = i54; l[55] = i55; l[56] = i56; l[57] = i57; l[58] = i58; l[59] = i59;
		l[60] = i60; l[61] = i61; l[62] = i62; l[63] = i63; l[64] = i64; l[65] = i65; l[66] = i66; l[67] = i67; l[68] = i68; l[69] = i69;
		l[70] = i70; l[71] = i71; l[72] = i72; l[73] = i73; l[74] = i74; l[75] = i75; l[76] = i76; l[77] = i77; l[78] = i78; l[79] = i79;
		l[80] = i80; l[81] = i81; l[82] = i82; l[83] = i83; l[84] = i84; l[85] = i85; l[86] = i86; l[87] = i87; l[88] = i88; l[89] = i89;
		l[90] = i90; l[91] = i91; l[92] = i92; l[93] = i93; l[94] = i94; l[95] = i95; l[96] = i96; l[97] = i97; l[98] = i98; l[99] = i99;
		_sort(l);
	}
	
	private void _sort(int[] l) {
		if (l.length > 1) {
			final int mid = l.length / 2;
			final int[] left = new int[mid];
			final int[] right = new int[l.length - mid];
			System.arraycopy(l, 0, left, 0, mid);
			System.arraycopy(l, mid, right, 0, l.length - mid);
			
			_sort(left);
			_sort(right);
			
			int i = 0, j = 0, k = 0;
			while (i < left.length && j < right.length) {
				if (left[i] < right[j]) {
					l[k] = left[i];
					++i;
				} else {
					l[k] = right[j];
					++j;
				}
				++k;
			}
			
			while (i < left.length) {
				l[k] = left[i];
				++i;
				++k;
			}
			
			while (j < right.length) {
				l[k] = right[j];
				++j;
				++k;
			}
		}
	}
	
	public void sortWorstCase() {
		i0 = 64;  i1 = 96;   i2 = 32;  i3 = 48;  i4 = 80;  i5 = 16;  i6 = 56;  i7 = 88;  i8 = 24;  i9 = 40; 
		i10 = 72; i11 = 8;   i12 = 60; i13 = 92; i14 = 28; i15 = 44; i16 = 76; i17 = 12; i18 = 52; i19 = 84; 
		i20 = 20; i21 = 100; i22 = 36; i23 = 68; i24 = 4;  i25 = 62; i26 = 94; i27 = 30; i28 = 46; i29 = 78; 
		i30 = 14; i31 = 54;  i32 = 86; i33 = 22; i34 = 38; i35 = 70; i36 = 6;  i37 = 58; i38 = 90; i39 = 26; 
		i40 = 42; i41 = 74;  i42 = 10; i43 = 50; i44 = 82; i45 = 18; i46 = 98; i47 = 34; i48 = 66; i49 = 2; 
		i50 = 63; i51 = 95;  i52 = 31; i53 = 47; i54 = 79; i55 = 15; i56 = 55; i57 = 87; i58 = 23; i59 = 39; 
		i60 = 71; i61 = 7;   i62 = 59; i63 = 91; i64 = 27; i65 = 43; i66 = 75; i67 = 11; i68 = 51; i69 = 83; 
		i70 = 19; i71 = 99;  i72 = 35; i73 = 67; i74 = 3;  i75 = 61; i76 = 93; i77 = 29; i78 = 45; i79 = 77; 
		i80 = 13; i81 = 53;  i82 = 85; i83 = 21; i84 = 37; i85 = 69; i86 = 5;  i87 = 57; i88 = 89; i89 = 25; 
		i90 = 41; i91 = 73;  i92 = 9;  i93 = 49; i94 = 81; i95 = 17; i96 = 97; i97 = 33; i98 = 65; i99 = 1;
		sort();
	}
	
	private static int[] worstCaseArrayOfSize(int n) {
		if (n == 1) {
			return new int[] { 1 };
		} else {
			final int[] top = worstCaseArrayOfSize((int) Math.floor(((float) n) / 2));
			final int[] bottom = worstCaseArrayOfSize((int) Math.ceil(((float) n) / 2));
			return IntStream.concat(Arrays.stream(top).map(x -> x * 2), Arrays.stream(bottom).map(x -> x * 2 - 1)).toArray();
		}
	}
	
	public static void main(String[] s) {
		System.out.println(Arrays.toString(worstCaseArrayOfSize(100)));
	}
}
